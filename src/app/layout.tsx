import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { Toaster } from 'react-hot-toast';
import { AuthProvider } from '@/app/context/authContext';
import { ProfileProvider } from '@/app/context/profileContext';



const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
     <html lang="en">
      <body className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900">
        <AuthProvider>
          <ProfileProvider>
            {/* <LandingNav /> */}
            <div className="relative overflow-hidden">
              <div className="absolute inset-0 bg-[radial-gradient(circle_at_center,_var(--tw-gradient-stops))] from-transparent via-gray-900/50 to-transparent"></div>
              {children} {/* This replaces <Outlet /> */}
            </div>
            <Toaster position="bottom-right" />
          </ProfileProvider>
        </AuthProvider>
      </body>
    </html>
  );
  
}
// function AuthSetup({ children }: { children: React.ReactNode }) {
//   const { checkAuth } = useAuth();
//   const router = useRouter();
//   const pathname = usePathname();

//   useEffect(() => {
//     // 1. Configure Axios to point to Express backend
//     axios.defaults.baseURL = process.env.NEXT_PUBLIC_API_BASE_URL;
//     axios.defaults.withCredentials = true; // For cookies/sessions

//     // 2. Check auth status
//     checkAuth().then((isAuthenticated:any) => {
//       // 3. Redirect if needed (example: protect /profile)
//       if (!isAuthenticated && pathname === '/profile') {
//         router.push('/login');
//       }
//     });
//   }, [pathname]);

//   return <>{children}</>;
// }
